{"version":3,"file":"component-material.cjs.production.min.js","sources":["../src/constants.ts","../src/helpers/objects.ts","../src/component-material.tsx","../src/create-material.ts","../src/proxies.tsx","../src/index.tsx"],"sourcesContent":["export const VERT = 'vert'\nexport const FRAG = 'frag'\nexport const COMMON = 'common'\nexport const DEFAULT_VERT_CHUNK = 'project_vertex'\nexport const DEFAULT_FRAG_CHUNK = 'dithering_fragment'\n","export const getKeyValue = <T, K extends keyof T>(obj: T, key: K): T[K] => obj[key]\nexport const setKeyValue = <T, K extends keyof T>(obj: T, key: K, value: any): T[K] => (obj[key] = value)\n","import React, { useMemo, useRef } from 'react'\nimport { FRAG, VERT } from './constants'\nimport createMaterial from './create-material'\nimport { ChildProps, ExtensionShaderObject, ExtensionShadersObject, Uniforms } from './types/internal'\nimport { ComponentMaterialProps, GenericMaterial } from './types/index'\n\nfunction editShader(shader: string, extensions: ExtensionShaderObject) {\n  Object.entries(extensions).forEach(([key, { value, replaceChunk }]) => {\n    if (value && shader.includes(key)) {\n      shader = shader.replace(\n        `#include <${key}>`,\n        `\n          ${replaceChunk ? '' : `#include <${key}>`}\n          ${value}\n        `\n      )\n    }\n  })\n  return shader\n}\n\nfunction editShaderHead(shader: string, head: string) {\n  if (head && typeof head === 'string') {\n    shader = `\n      ${head}\n      ${shader}\n    `\n  }\n  return shader\n}\n\nfunction addUniforms(shader: string, uniforms: Uniforms) {\n  return `${Object.entries(uniforms)\n    .map(([key, { type }]) => `uniform ${type} ${key};`)\n    .join(' ')}\n    ${shader}\n  `\n}\n\nfunction addVarying(shader: string, varying: Uniforms) {\n  return `${Object.entries(varying)\n    .map(([key, { type }]) => `varying ${type} ${key};`)\n    .join(' ')}\n    ${shader}\n  `\n}\n\nexport const ComponentMaterial = React.forwardRef<GenericMaterial | undefined, ComponentMaterialProps>(\n  function ComponentMaterial({ children, varyings = {}, uniforms = {}, from, ...props }, ref) {\n    const uniformsRef = useRef(uniforms)\n    const varyingsRef = useRef(varyings)\n\n    const _uniforms = useMemo(\n      () =>\n        Object.entries(uniforms).reduce((acc: any, [key, { value }]) => {\n          acc[key] = value\n          return acc\n        }, {}),\n      [uniforms]\n    )\n\n    const shaders = useMemo<ExtensionShadersObject>(\n      () =>\n        React.Children.toArray(children).reduce(\n          (acc: any, child: any) => {\n            const shader = child?.props?.children\n\n            if (typeof shader === 'string') {\n              const replaceChunk = child?.props?.replaceChunk || false\n              const { chunkName, shaderType }: ChildProps = child.type\n\n              if ([VERT, FRAG].includes(shaderType)) {\n                if (chunkName === 'Head') {\n                  acc[shaderType].head = acc[shaderType].head.concat(`\n                  ${shader}\n                `)\n                } else {\n                  if (!acc[shaderType][chunkName]) {\n                    acc[shaderType][chunkName] = {\n                      value: '',\n                      replaceChunk: false,\n                    }\n                  }\n\n                  acc[shaderType][chunkName].replaceChunk = replaceChunk\n                  acc[shaderType][chunkName].value = acc[shaderType][chunkName].value.concat(`\n                    ${shader}\n                  `)\n                }\n              } else {\n                acc.common = acc.common.concat(`\n                ${shader}\n              `)\n              }\n            }\n\n            return acc\n          },\n          {\n            vert: {\n              head: '',\n            },\n            frag: {\n              head: '',\n            },\n            common: '',\n          }\n        ),\n      [children]\n    )\n\n    const material = useMemo(() => {\n      const { vert, frag, common } = shaders\n      const { head: vertHead, ...vertBody } = vert\n      const { head: fragHead, ...fragBody } = frag\n\n      const _material = createMaterial(from, uniformsRef.current, shader => {\n        shader.fragmentShader = editShaderHead(shader.fragmentShader, fragHead)\n        shader.vertexShader = editShaderHead(shader.vertexShader, vertHead)\n        shader.fragmentShader = editShaderHead(shader.fragmentShader, common)\n        shader.vertexShader = editShaderHead(shader.vertexShader, common)\n        shader.fragmentShader = addUniforms(shader.fragmentShader, uniformsRef.current)\n        shader.vertexShader = addUniforms(shader.vertexShader, uniformsRef.current)\n        shader.fragmentShader = addVarying(shader.fragmentShader, varyingsRef.current)\n        shader.vertexShader = addVarying(shader.vertexShader, varyingsRef.current)\n        shader.fragmentShader = editShader(shader.fragmentShader, fragBody)\n        shader.vertexShader = editShader(shader.vertexShader, vertBody)\n      })\n      return new _material()\n    }, [shaders, from])\n\n    return <primitive ref={ref} object={material} attach=\"material\" {...props} {..._uniforms} />\n  }\n)\n","import { MeshPhysicalMaterial, Shader } from 'three'\n\nimport { getKeyValue, setKeyValue } from './helpers/objects'\nimport { MaterialConstructor } from './types/index'\nimport { Uniforms } from './types/internal'\n\nfunction createMaterial(\n  baseMaterial: MaterialConstructor = MeshPhysicalMaterial,\n  uniforms: Uniforms = {},\n  onBeforeCompile?: (shader: Shader) => void\n) {\n  return class ComponentMaterial extends baseMaterial {\n    constructor(parameters = {}) {\n      super(parameters)\n      const entries = Object.keys(uniforms)\n      this.setValues(parameters)\n\n      entries.forEach(key => {\n        setKeyValue(this, `_${key}`, { value: uniforms[key] })\n        Object.defineProperty(this, key, {\n          get: () => this[`_${key}`].value,\n          set: v => (this[`_${key}`].value = v),\n        })\n      })\n    }\n\n    onBeforeCompile(shader: Shader) {\n      const handler = {\n        get: function (target: Shader, key: keyof Shader) {\n          return getKeyValue(target, key)\n        },\n        set: function (target: Shader, key: keyof Shader, value: any) {\n          setKeyValue(target, key, value)\n          // Accoring to ProxyHandler, the set function should return a boolean.\n          return true\n        },\n      }\n\n      const entries = Object.keys(uniforms)\n      entries.forEach(key => {\n        shader.uniforms[key] = this[`_${key}`]\n      })\n\n      const proxiedShader = new Proxy(shader, handler)\n\n      if (onBeforeCompile) {\n        onBeforeCompile(proxiedShader)\n      }\n    }\n  }\n}\n\nexport default createMaterial\n","import { DEFAULT_FRAG_CHUNK, DEFAULT_VERT_CHUNK, FRAG, VERT } from './constants'\nimport { ProxyProps, ProxyComponent } from './types/internal'\n\nimport { fragmentChunks, vertexChunks, commonChunks } from './generated'\n\nfunction NullFunction() {\n  return null\n}\n\ntype ShaderProxyHelper<T extends string> = {\n  [key in T]: any\n} & {\n  Body: ProxyComponent\n  Head: ProxyComponent\n}\n\n// -- VERTEX PROXY --\nconst vertHandler = {\n  get: function(_: any, name: string) {\n    const Component = function<Child extends string[] | string>({ children }: ProxyProps<Child>) {\n      return children\n    }\n    Object.defineProperty(Component, 'chunkName', { writable: true })\n    Object.defineProperty(Component, 'shaderType', { writable: true })\n    Component.chunkName = name === 'Body' ? DEFAULT_VERT_CHUNK : name\n    Component.shaderType = VERT\n    return Component\n  },\n}\nexport const vert: ShaderProxyHelper<vertexChunks | commonChunks> = new Proxy(NullFunction, vertHandler)\n\n// -- FRAGMENT PROXY --\nconst fragHandler = {\n  get: function(_: any, name: string) {\n    const Component = function<Child extends string[] | string>({ children }: ProxyProps<Child>) {\n      return children\n    }\n    Object.defineProperty(Component, 'chunkName', { writable: true })\n    Object.defineProperty(Component, 'shaderType', { writable: true })\n    Component.chunkName = name === 'Body' ? DEFAULT_FRAG_CHUNK : name\n    Component.shaderType = FRAG\n    return Component\n  },\n}\n\nexport const frag: ShaderProxyHelper<fragmentChunks | commonChunks> = new Proxy(NullFunction, fragHandler)\n\nexport function common<Child extends string[] | string>({ children }: ProxyProps<Child>) {\n  return (children as unknown) as JSX.Element\n}\n\n// TODO\n// // -- NOISE PROXY --\n// const noise = {\n//   snoise2: \"glsl-noise/simplex/2d\",\n//   snoise3: \"glsl-noise/simplex/3d\",\n//   snoise4: \"glsl-noise/simplex/4d\",\n//   cnoise2: \"glsl-noise/classic/2d\",\n//   cnoise3: \"glsl-noise/classic/3d\",\n//   cnoise4: \"glsl-noise/classic/4d\",\n//   pnoise2: \"glsl-noise/periodic/2d\",\n//   pnoise3: \"glsl-noise/periodic/3d\",\n//   pnoise4: \"glsl-noise/periodic/4d\",\n// };\n// const noiseHandler = {\n//   get: function (_, name) {\n//     const path = noise[name];\n//     if (path) {\n//       const pragma = `#pragma glslify: ${name} = require(${path})`;\n//       const Component = () => null;\n//       Object.defineProperty(Component, \"shaderType\", { writable: true });\n//       Object.defineProperty(Component, \"toolShader\", { writable: true });\n//       Component.shaderType = TOOL;\n//       Component.toolShader = pragma;\n//       return Component;\n//     }\n//     return null;\n//   },\n// };\n// export const Noise = new Proxy(() => null, noiseHandler);\n\n// // -- EASING PROXY --\n// const easing = {\n//   backInOut: \"glsl-easings/back-in-out\",\n//   backIn: \"glsl-easings/back-in\",\n//   backOut: \"glsl-easings/back-out\",\n//   bounceInOut: \"glsl-easings/bounce-in-out\",\n//   bounceIn: \"glsl-easings/bounce-in\",\n//   bounceOut: \"glsl-easings/bounce-out\",\n//   circularInOut: \"glsl-easings/circular-in-out\",\n//   circularIn: \"glsl-easings/circular-in\",\n//   circularOut: \"glsl-easings/circular-out\",\n//   cubicInOut: \"glsl-easings/cubic-in-out\",\n//   cubicIn: \"glsl-easings/cubic-in\",\n//   cubicOut: \"glsl-easings/cubic-out\",\n//   elasticInOut: \"glsl-easings/elastic-in-out\",\n//   elasticIn: \"glsl-easings/elastic-in\",\n//   elasticOut: \"glsl-easings/elastic-out\",\n//   exponentialInOut: \"glsl-easings/exponential-in-out\",\n//   exponentialIn: \"glsl-easings/exponential-in\",\n//   exponentialOut: \"glsl-easings/exponential-out\",\n//   linear: \"glsl-easings/linear\",\n//   quadraticInOut: \"glsl-easings/quadratic-in-out\",\n//   quadraticIn: \"glsl-easings/quadratic-in\",\n//   quadraticOut: \"glsl-easings/quadratic-out\",\n//   quarticInOut: \"glsl-easings/quartic-in-out\",\n//   quarticIn: \"glsl-easings/quartic-in\",\n//   quarticOut: \"glsl-easings/quartic-out\",\n//   quinticInOut: \"glsl-easings/quintic-in-out\",\n//   quinticIn: \"glsl-easings/quintic-in\",\n//   quinticOut: \"glsl-easings/quintic-out\",\n//   sineInOut: \"glsl-easings/sine-in-out\",\n//   sineIn: \"glsl-easings/sine-in\",\n//   sineOut: \"glsl-easings/sine-out\",\n// };\n// const easingHandler = {\n//   get: function (_, name) {\n//     const path = easing[name];\n//     if (path) {\n//       const pragma = `#pragma glslify: ${name} = require(${path})`;\n//       const Component = () => null;\n//       Object.defineProperty(Component, \"shaderType\", { writable: true });\n//       Object.defineProperty(Component, \"toolShader\", { writable: true });\n//       Component.shaderType = TOOL;\n//       Component.toolShader = pragma;\n//       return Component;\n//     }\n//     return null;\n//   },\n// };\n// export const Ease = new Proxy(() => null, easingHandler);\n","import { ComponentMaterial } from './component-material'\nimport { frag, vert, common } from './proxies'\n\nexport * from './types/index'\n\nexport type MT = typeof ComponentMaterial & {\n  Vert: typeof vert\n  Frag: typeof frag\n  Common: typeof common\n}\n\nconst M = ComponentMaterial\n\nObject.defineProperties(ComponentMaterial, {\n  Vert: {\n    get: (): typeof vert => vert,\n  },\n  Frag: {\n    get: (): typeof frag => frag,\n  },\n  Common: {\n    get: (): typeof common => common,\n  },\n})\n\nexport default M as MT\n"],"names":["VERT","FRAG","setKeyValue","obj","key","value","editShader","shader","extensions","Object","entries","forEach","replaceChunk","includes","replace","editShaderHead","head","addUniforms","uniforms","map","type","join","addVarying","varying","ComponentMaterial","React","forwardRef","ref","children","varyings","from","props","uniformsRef","useRef","varyingsRef","_uniforms","useMemo","reduce","acc","shaders","Children","toArray","child","_child$props","chunkName","shaderType","concat","common","vert","frag","material","vertHead","vertBody","fragHead","fragBody","baseMaterial","onBeforeCompile","MeshPhysicalMaterial","parameters","keys","setValues","defineProperty","get","_this","set","v","handler","target","getKeyValue","_this2","proxiedShader","Proxy","createMaterial","current","fragmentShader","vertexShader","object","attach","NullFunction","_","name","Component","writable","M","defineProperties","Vert","Frag","Common"],"mappings":"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"}